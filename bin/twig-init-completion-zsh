#!/usr/bin/env ruby

require 'rubygems'
require 'twig'
require 'fileutils'

def help_content
  <<-HELP

twig-init-completion-zsh
=========================

Initializes zsh tab completion for Twig. Use `twig init` to run all setup.

Synopsis
--------

  twig init-completion-zsh

Description
-----------

  Initializes zsh tab completion for Twig. Instead of running this directly,
  run `twig init` to run all setup tasks for the current shell. Uses all
  options available for `twig init-completion`.

See also
--------

  twig-init
  twig-init-completion
  twig-init-config

Subcommand for Twig: <http://rondevera.github.io/twig/>
Author: Ron DeVera <http://rondevera.com>

  HELP
end

args = ARGV.dup

if args.include?('--help')
  puts help_content
  exit
end

script = <<-SCRIPT

#compdef twig

# AUTO-GENERATED with Twig v#{Twig::VERSION}. Regenerate with
# `twig init-completion --force`.
#
# Initializes zsh tab completion for Twig. To use this, run
# `twig init-completion` and follow the instructions.
#
# If you'd like to help improve tab completion, or add
# completion for your favorite shell, open an issue to make
# plans: https://github.com/rondevera/twig/issues
#
# Twig: <#{Twig::HOMEPAGE}>
# Author: Antonio Murdaca <me@runcom.ninja>

local curcontext=$curcontext state line
declare -A opt_args

__twig_branches() {
  compadd "$@" $(git for-each-ref refs/heads/ --format="%(refname:short)" | tr '\n' ' ')
}

__twig_formats() {
  compadd "$@" json
}

__twig_subcommands() {
  compadd "$@" #{Twig::Subcommands.all_names.join(' ')}
}

_twig () {
  if [ -z "$(git rev-parse HEAD 2>/dev/null)" ]; then
    return 0;
  fi

  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments \
    '1: :->command' \
    '*: :->args'

  case $state in
    command) __twig_subcommands ;;
    *)
      case $words[2] in
        -b|--branch)  __twig_branches ;;
        --format)     __twig_formats ;;
        diff)         __twig_branches ;;
        diff-branch)  __twig_branches ;;
        rebase)       __twig_branches ;;
        *)            ;;
        esac
      ;;
  esac

  return 0
}

_twig

SCRIPT
script = script.strip + "\n"

force = args.delete('--force')

twig_dir = '~/.twig'
FileUtils.mkdir_p(File.expand_path(twig_dir))

script_path      = File.join(twig_dir, '/_twig-completion.zsh')
full_script_path = File.expand_path(script_path)
script_exists    = File.exist?(full_script_path)

if script_exists && !force
  twig = Twig.new
  puts twig.format_string("The file `#{script_path}` already exists.", :color => :red)
  puts 'To overwrite it with a default file, run `twig init-completion --force`.'
else
  File.open(full_script_path, 'w') do |file|
    file.write script
  end

  if script_exists
    puts "Overwrote `#{script_path}`."
  else
    puts "Created `#{script_path}`."
  end
end

puts
puts ' => If you are using zsh, add the following to the *beginning* of your `~/.zshrc` or equivalent:'
puts
puts "      fpath=(#{twig_dir} $fpath)"
puts '      autoload -U compinit'
puts '      compinit'
puts
puts ' => If you are using oh-my-zsh just add the first line to the *beginning* of your `~/.zshrc` or load'
puts '    the `twig` plugin.'
puts
puts ' => To finish setup, open a new command-line window or run `source ~/.zshrc`.'
puts
